#!/usr/bin/env bash

set -e
shopt -s extglob
cd "$(dirname "$0")"

if [[ $# -ne 1 ]]; then
	echo "Usage: $0 <version>"
	exit 1
fi

info() { echo "[info] $1"; }

version="$1"
file_name="swift-${version}-RELEASE-osx"
package="${file_name}-package.pkg"

mkdir -p toolchains
cd toolchains
info "Downloading macOS toolchain"
if ! [[ -f "toolchain-${version}.pkg" ]]; then
	curl -Lo "toolchain-${version}.pkg" "https://download.swift.org/swift-${version}-release/xcode/swift-${version}-RELEASE/${file_name}.pkg"
fi

info "Unpacking toolchain"
# remove any pre-existing usr dir first
rm -rf usr
xar -xvf "toolchain-${version}.pkg" "${package}/Payload"
bsdtar -xzvf "${package}/Payload" "usr"
rm -rf "${package}"

info "Modifying macOS toolchain"
cd usr
rm -rf bin lib/libclang.dylib lib/sourcekitd.framework lib/libswiftDemangle.dylib lib/swift/!(clang|iphoneos|shims|migrator) lib/swift_static/!(iphoneos) libexec local
cd lib/swift/iphoneos
for file in libswift*.dylib; do
	# symlink to the libswift package
	ln -fs "/usr/lib/libswift/${version}/${file}" "${file}"
done
cd ../../../

info "Installing dependencies"
sudo apt update && sudo apt install -y \
	autoconf 			  \
	automake 			  \
	build-essential       \
	clang                 \
	cmake                 \
	git                   \
	icu-devtools          \
	libcurl4-openssl-dev  \
	libedit-dev           \
	libicu-dev            \
	libncurses5-dev       \
	libpython3-dev        \
	libssl-dev			  \
	libsqlite3-dev        \
	libtool 			  \
	libxml2-dev           \
	make 				  \
	ninja-build           \
	pkg-config            \
	python2               \
	python-six            \
	python2-dev           \
	python3-six           \
	python3-distutils     \
	rsync                 \
	swig                  \
	systemtap-sdt-dev     \
	tzdata                \
	uuid-dev              \
	zip

git clone --depth=1 https://github.com/libimobiledevice/libplist
cd libplist
./autogen.sh --without-cython
sudo make -j$(nproc --all) install
cd ../

git clone --depth=1 https://github.com/procursusteam/ldid
cd ldid
sudo make -j$(nproc --all) PREFIX="" install
cd ../

info "Checking out Swift repo"
if [[ -d swift-source ]]; then
	rm -rf swift-source
fi

mkdir swift-source
cd swift-source
git clone --depth=1 https://github.com/apple/swift
cd swift
git remote add upstream https://github.com/L1ghtmann/swift/
git fetch upstream
git cherry-pick 990e77a8336237a2ff98736720cc98def7c055c7 --strategy-option theirs
cd ../
swift/utils/update-checkout --clone --tag "swift-${version}-RELEASE" -j "$(nproc --all)"

# patch clang
sed -ie 's;__has_include(<CoreServices/CoreServices.h>);__has_include(<FSEvents/FSEvents.h>);g' llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp

# compile swift
info "Compiling Swift"
swift/utils/build-script \
	--build-subdir=LLVMClangSwift_iphoneos \
	--release \
	-- \
	--install-swift \
	--install-destdir=output \
	--swift-install-components="compiler;clang-builtin-headers;editor-integration;tools;sourcekit-xpc-service;swift-remote-mirror;swift-remote-mirror-headers;" \
	--install-prefix=/usr \
	--cmake-generator=Ninja \
	--extra-cmake-options="-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64" \
	--cross-compile-hosts=iphoneos-arm64 \
	--compiler-vendor=apple \
	--swift-primary-variant-sdk=IOS \
	--swift-primary-variant-arch=arm64 \
	--build-args="-j$(nrpco --all)" \
	--build-swift-static-stdlib=0 \
	--build-swift-dynamic-stdlib=0 \
	--build-swift-static-sdk-overlay=0 \
	--build-swift-dynamic-sdk-overlay=0 \
	--build-runtime-with-host-compiler=0 \
	--skip-build-benchmarks \
	--skip-build-clang-tools-extra \
	--skip-build-android \
	--skip-test-sourcekit \
	--skip-test-swift \
	--llvm-include-tests=0 \
	--llvm-enable-modules=0 \
	--skip-build-tvos \
	--skip-test-tvos \
	--skip-build-watchos \
	--skip-test-watchos \
	--build-swift-examples=0 \
	--swift-include-tests=0 \
	--darwin-deployment-version-ios=10.0 \
	--darwin-crash-reporter-client=1 \
	--reconfigure
cd ../

info "Merging toolchains"
cp -a "swift-source/output/merged-hosts/usr/bin" usr/
cp "swift-source/output/merged-hosts/usr/lib/libswiftDemangle.dylib" usr/lib/
cd usr/
# Codesign any Mach-O files, also adding the correct entitlements
find . \( -type f \( -name '*.dylib' -or \( -path './bin/*' -not -name '*.py' \) \) -or \( -path '*.framework/*' -not -name '*.*' \) -not -name '.DS_Store' \) -print0 | xargs -0 -I{} sh -c "ldid -S../../ent.xml {} || :"

copy_file() {
	# Remove "./" from the file path
	file="$(echo $1 | cut -c 3-)"
	mkdir -p share/swift_stash/"$(dirname "$file")"
	mv -v "$file" share/swift_stash/"$(dirname "$file")"
	ln -fs /usr/share/swift_stash/"$file" "$file"
}

export -f copy_file

find . -type f -print0 | xargs -0 -I{} sh -c 'copy_file {}'

cd ..
mv usr "usr-${version}"

echo "${version}" > .version
