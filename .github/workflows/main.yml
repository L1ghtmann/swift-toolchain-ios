name: Build

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]

jobs:
  host-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@main
      - name: LLVM/Clang Prep work
        run: |
          echo "[info] Checking out LLVM repo"
          mkdir llvm-source && cd llvm-source
          git clone --depth=1 --single-branch -b swift/release/5.5 https://github.com/apple/llvm-project/

      - name: Build LLVM/Clang for host
        run: |
          export DEVELOPER_DIR="/Applications/Xcode_13.0.app/Contents/Developer/"
          echo "[info] Compiling host toolchain"
          mkdir -p llvm-source/llvm-project/build/ $HOME/llvm-macosx-x86_64/
          cd llvm-source/llvm-project/build/
          cmake -G "Unix Makefiles" -DLLVM_ENABLE_PROJECTS='clang' \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_ENABLE_Z3_SOLVER=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_ENABLE_WARNINGS=OFF \
            -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DCMAKE_INSTALL_PREFIX="$HOME/llvm-macosx-x86_64/" \
            ../llvm
          make -j$(sysctl -n hw.ncpu) install
          # Doesn't copy over clang-tblgen by default??
          cp -av bin/clang-tblgen $HOME/llvm-macosx-x86_64/bin/

      - name: Swift Compiler Prep work
        run: |
          brew install ninja
          pip install --user six
          echo "[info] Checking out Swift repo"
          mkdir swift-source && cd swift-source
          git clone --depth=1 https://github.com/apple/swift.git
          swift/utils/update-checkout --clone --tag "swift-5.5-RELEASE" -j "$(sysctl -n hw.ncpu)"

      - name: Build Swift Compiler for host
        run: |
          export DEVELOPER_DIR="/Applications/Xcode_13.0.app/Contents/Developer/"
          export SKIP_XCODE_VERSION_CHECK=1
          echo "[info] Compiling Swift"
          cd swift-source && mkdir -p build/LLVMClangSwift_iphoneos/
          mv -v $HOME/llvm-macosx-x86_64 build/LLVMClangSwift_iphoneos/
          swift/utils/build-script \
            --build-subdir=LLVMClangSwift_iphoneos \
            --release \
            -- \
            --install-swift \
            --swift-install-components="compiler" \
            --cmake-generator=Ninja \
            --extra-cmake-options="-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64" \
            --build-args="-j$(sysctl -n hw.ncpu)" \
            --swift-tools-num-parallel-lto-link-jobs="$(sysctl -n hw.ncpu)" \
            --build-llvm=0 \
            --skip-build-benchmarks \
            --skip-build-android \
            --skip-test-sourcekit \
            --skip-test-swift \
            --skip-build-tvos \
            --skip-test-tvos \
            --skip-build-watchos \
            --skip-test-watchos \
            --build-swift-examples=0 \
            --swift-include-tests=0 \
            --reconfigure
          mv -v build/LLVMClangSwift_iphoneos/ $HOME

      - name: Prep host tc for artifact upload
        run: |
          cd $HOME
          zip -9 -r LLVMClangSwift_iphoneos.zip LLVMClangSwift_iphoneos

      - name: Upload host tc artifact
        uses: actions/upload-artifact@main
        with:
          name: LLVMClangSwift_iphoneos-Container
          path: ~/LLVMClangSwift_iphoneos.zip

  ios-build:
    needs: host-build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@main
      - name: Download artifact
        uses: actions/download-artifact@main
      - name: Extract host tc from artifact
        run: |
          set -x
          for container in ./*Container; do
            if [[ -d "$container" ]]; then
              unzip $container/*.zip -d $HOME
            fi
          done

      - name: The work
        run: |
          pip install --user six
          ./prepare-toolchain 5.5 /Applications/Xcode_13.0.app

      - name: theos-build
        uses: L1ghtmann/theos-build@main

      - uses: actions/upload-artifact@main
        with:
          name: package
          path: packages/*.deb

  upload:
    needs: ios-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download artifacts
        uses: actions/download-artifact@main

      - name: Create release
        id: create_release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.0.1
          release_name: Trial 1
          draft: false
          prerelease: false

      - name: Attach debs to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          debs=()
          for deb in **/*.deb; do
            debs+=("-a" "$deb")
          done
          hub release edit "${debs[@]}" -m "Trial 1" "0.0.1"
