name: Build

on:
  push:
  workflow_dispatch:

jobs:
  host-build:
    runs-on: macos-12
    steps:
      - name: Prep
        run: |
          brew install ninja
          pip install --user six
          echo "[info] Checking out Swift repo"
          mkdir swift-source && cd swift-source
          git clone --depth=1 https://github.com/apple/swift
          cd swift
          git remote add upstream https://github.com/L1ghtmann/swift/
          git fetch upstream
          git cherry-pick 990e77a8336237a2ff98736720cc98def7c055c7 --strategy-option theirs
          utils/update-checkout --clone --tag "swift-5.7.2-RELEASE" -j "$(sysctl -n hw.ncpu)"

      - name: Build Bits For Host
        run: |
          export DEVELOPER_DIR="/Applications/Xcode_14.2.app/Contents/Developer/"
          export SKIP_XCODE_VERSION_CHECK=1
          echo "[info] Compiling host bits"
          swift-source/swift/utils/build-script \
            --build-subdir=macosx \
            -R \
            --no-assertions \
            -j$(sysctl -n hw.ncpu) \
            --install-destdir=/ \
            --skip-build-cmark \
            --skip-build-llvm \
            --skip-build-swift \
            --skip-early-swift-driver \
            --build-toolchain-only \
            --host-cc=$(command -v clang) \
            --host-cxx=$(command -v clang++)

      - name: Build Swift
        run: |
          export DEVELOPER_DIR="/Applications/Xcode_14.2.app/Contents/Developer/"
          export SKIP_XCODE_VERSION_CHECK=1
          echo "[info] Compiling Swift"
          swift-source/swift/utils/build-script \
            --build-subdir=iphoneos \
            -RA \
            --llvm-targets-to-build='X86;ARM;AArch64' \
            -j$(sysctl -n hw.ncpu) \
            --ios \
            --build-toolchain-only \
            --skip-local-build \
            --skip-local-host-install \
            --cross-compile-hosts=iphoneos-arm64 \
            --cross-compile-deps-path=swift-source/build/macosx \
            --native-swift-tools-path=$(xcode-select -p)/bin/ \
            --native-clang-tools-path=$(xcode-select -p)/bin/ \
            --cross-compile-append-host-target-to-destdir=0 \
            --install-destdir=output \
            --install-swift \
            --install-prefix=/usr \
            --swift-install-components="compiler" \
            --cmake-generator=Ninja \
            --skip-build-benchmarks \
            --skip-build-clang-tools-extra \
            --skip-build-android \
            --skip-test-sourcekit \
            --skip-test-swift \
            --skip-build-tvos \
            --skip-test-tvos \
            --skip-build-watchos \
            --skip-test-watchos \
            --llvm-include-tests=0 \
            --llvm-enable-modules=0 \
            --build-swift-examples=0 \
            --swift-include-tests=0 \
            --darwin-deployment-version-osx="$(sw_vers -productVersion)" \
            --darwin-crash-reporter-client=1
          echo "macosx" && ls -A swift-source/build/macosx
          echo "ios" && ls -A swift-source/build/iphoneos
          echo "output" && ls -A swift-source/output/
          # mv -v build/iphoneos/ $HOME

      # - name: Prep Host Toolchain For Artifact Upload
      #   run: |
      #     cd $HOME
      #     echo "[info] Preparing host toolchain for intermediate upload"
      #     zip -9 -r LLVMClangSwift_iphoneos.zip LLVMClangSwift_iphoneos

      # Upload artifact so a new job can pickup from here
      # Prevents the workflow from going over the 6hr limit
      # - name: Upload Host Toolchain Artifact
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: LLVMClangSwift_iphoneos
      #     path: ~/LLVMClangSwift_iphoneos.zip

  # ios-build:
  #   needs: host-build
  #   runs-on: macos-12
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@main
  #     - name: Download Artifact
  #       uses: actions/download-artifact@main
  #       with:
  #         name: LLVMClangSwift_iphoneos

  #     - name: Extract Host Toolchain
  #       run: |
  #         unzip LLVMClangSwift_iphoneos.zip -d $HOME

  #     - name: The Work
  #       run: |
  #         export SKIP_XCODE_VERSION_CHECK=1
  #         brew install ninja
  #         pip install --user six
  #         ./prepare-toolchain 5.7.2 /Applications/Xcode_14.2.app

  #     - name: Set up Theos
  #       run: |
  #         brew install ldid make xz
  #         git clone --recursive https://github.com/theos/theos.git ~/theos

  #     - name: Build Deb
  #       run: |
  #         export THEOS=~/theos
  #         gmake clean package FINALPACKAGE=1

  #     - name: Attach Deb To Release
  #       run: |
  #         set -x
  #         TAG="${GITHUB_REF##*/}-${GITHUB_SHA:0:7}"
  #         gh release create "$TAG" --draft --title "Draft Release"
  #         gh release upload "$TAG" packages/*.deb
