name: Build

on:
  - push
  - workflow_dispatch

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  host-build:
    runs-on: macos-12
    steps:
      - name: Host Toolchain Prep
        run: |
          brew install ninja
          pip install --user six
          echo "[info] Checking out Swift repo"
          mkdir swift-source && cd swift-source
          git clone --depth=1 https://github.com/apple/swift.git
          swift/utils/update-checkout --clone --tag "swift-5.7.2-RELEASE" -j "$(sysctl -n hw.ncpu)"

      - name: Build Swift Compiler For Host
        run: |
          echo "[info] Patching hardcoded lldb deployment version"
          cd swift-source
          sed -i '' "s@10.11@$(sw_vers -productVersion)@g" llvm-project/lldb/cmake/caches/Apple-lldb-macOS.cmake
          export DEVELOPER_DIR="/Applications/Xcode_14.2.app/Contents/Developer/"
          export SKIP_XCODE_VERSION_CHECK=1
          echo "[info] Compiling host toolchain"
          swift/utils/build-script \
            --build-subdir=LLVMClangSwift_iphoneos \
            --release \
            -- \
            --install-swift \
            --install-prefix=/usr \
            --llvm-install-components="clang;compiler-rt" \
            --swift-install-components="compiler" \
            --cmake-generator=Ninja \
            --extra-cmake-options="-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64" \
            --build-args="-j$(sysctl -n hw.ncpu)" \
            --lldb \
            --skip-build-benchmarks \
            --skip-build-clang-tools-extra \
            --skip-build-android \
            --skip-test-sourcekit \
            --skip-test-swift \
            --skip-build-tvos \
            --skip-test-tvos \
            --skip-build-watchos \
            --skip-test-watchos \
            --llvm-include-tests=0 \
            --llvm-enable-modules=0 \
            --build-swift-examples=0 \
            --swift-include-tests=0 \
            --darwin-deployment-version-osx="$(sw_vers -productVersion)" \
            --darwin-crash-reporter-client=1 \
            --reconfigure
          mv -v build/LLVMClangSwift_iphoneos/ $HOME

      - name: Prep Host Toolchain For Artifact Upload
        run: |
          cd $HOME
          echo "[info] Preparing host toolchain for intermediate upload"
          zip -9 -r LLVMClangSwift_iphoneos.zip LLVMClangSwift_iphoneos

      # Upload artifact so a new job can pickup from here
      # Prevents the workflow from going over the 6hr limit
      - name: Upload Host Toolchain Artifact
        uses: actions/upload-artifact@main
        with:
          name: LLVMClangSwift_iphoneos-Container
          path: ~/LLVMClangSwift_iphoneos.zip

  ios-build:
    needs: host-build
    runs-on: macos-12
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@main

      - name: Extract host tc from artifact
        run: |
          set -x
          for container in ./*Container; do
            if [[ -d "$container" ]]; then
              unzip $container/*.zip -d $HOME
            fi
          done

      - uses: actions/checkout@main

      - name: The Work
        run: |
          export SKIP_XCODE_VERSION_CHECK=1
          brew install ninja
          pip install --user six
          ./prepare-toolchain 5.7.2 /Applications/Xcode_14.2.app

      - name: Build Deb
        uses: L1ghtmann/theos-build@main
        with:
          extra_args: "FINALPACKAGE=1"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Draft Release
          body: ''
          draft: true

      - name: Attach Deb To Release
        run: |
          set -x
          gh release upload ${GITHUB_REF##*/} packages/*.deb
